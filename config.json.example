{
   "name": <name>,
   "read":{
      "input_file": <path>,
      "set_column": <number of column for set id, indexing from 1>,
      "tokens_column": <number of column for set tokens>,
      "column_delimiter": <delimiter for columns>,
      "token_delimiter": <delimiter for tokens>,
      "header":<whether csv contains a header>
   },
   "execute":[
      {
         "mode": < choose "experiment" or "single">,
         "type": < choose "threshold", "scalability", "verification", "topk">,
         "similarity":< choose "jaccard" or "edit">,
         "max_lines": <number of rows to read>,
         "total_lines": <number of total rows in file>,
         "threshold": <array of thresholds or single value>,
         "k": <array of k or single value>
         "shuffle": <boolean value for shuffling records>,
         "algorithm":<choose "tokenjoin", "silkmoth", "topkjoin", "best">,
	 "arguments":
		for threshold:	
		{	
		    "method": <setting name for logs>,
		    "posFilter": <boolean value for position filter>,
		    "jointFilter": <boolean value for joint utility filter>,,
		    "hybrid": <boolean value for hybrid filter>,,
		    "verificationAlg": <integer for verification method: 0 for Hungarian Algorithm,
                                       1 for Hungarian + Upper Bounds,
                                       2 for Hungarian + Upper & Lower Bounds>
		 }
		for topk:
		{
		    "method":<setting name for logs>,
		    "choice": <choice for initial threshold. 0 for 0, 1 for random k verifications, 2 for suggested method.>,
		    "deltaGeneration": <double for threshold used for candidate generation>,
		    "deltaRefinement": <double for threshold used for candidate upper bound refinement>,
		    "lambda": <how many candidates to keep from each record>,
		    "lambda2": <lambda2*k verifications to be computed>,
		 }
      },
  ]
}
